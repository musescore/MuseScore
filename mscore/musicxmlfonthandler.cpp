//=============================================================================
//  MusE Score
//  Linux Music Score Editor
//
//  Copyright (C) 2014 Werner Schweer and others
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License version 2.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//=============================================================================

/**
 MusicXML font handling support.
 */

#include "musicxmlfonthandler.h"

namespace Ms {
      
//---------------------------------------------------------
//   MScoreTextToMXML
//    Convert rich text as generated by Text::text()
//    into MusicXML text with formatting
//---------------------------------------------------------

MScoreTextToMXML::MScoreTextToMXML(const QString& t)
      {
      text = "<text>" + t + "</text>"; // convert text into valid xml
      qDebug("MScoreTextToMXML('%s')", qPrintable(t));
      }

void MScoreTextToMXML::parse() const
      {
      qDebug("MScoreTextToMXML::parse()");
      QXmlStreamReader r(text);
      while (!r.atEnd()) {
            // do processing
            r.readNext();
            if(r.isCharacters()) {
                  qDebug("Characters '%s'", qPrintable(r.text().toString()));
            }
            else if(r.isEndElement()) {
                  qDebug("EndElem '%s'", qPrintable(r.name().toString()));
                  }
            else if(r.isStartElement()) {
                  qDebug("StartElem '%s'", qPrintable(r.name().toString()));
                  if (r.name() == "font")
                        qDebug("   face='%s' size='%s'",
                               qPrintable(r.attributes().value("face").toString()),
                               qPrintable(r.attributes().value("size").toString()));
                  }
            }
      if (r.hasError()) {
            // do error handling
            qDebug("Error %s", qPrintable(r.errorString()));
            }
      }

} // namespace Ms
