
// SoLoud wrapper for D
// This file is autogenerated; any changes will be overwritten

module soloud;

pure @safe nothrow @nogc:

private struct SoloudObject
{
    public int* objhandle;
}



public struct Soloud
{
pure @safe nothrow @nogc:
	public enum AUTO = 0;
	public enum SDL1 = 1;
	public enum SDL2 = 2;
	public enum PORTAUDIO = 3;
	public enum WINMM = 4;
	public enum XAUDIO2 = 5;
	public enum WASAPI = 6;
	public enum ALSA = 7;
	public enum JACK = 8;
	public enum OSS = 9;
	public enum OPENAL = 10;
	public enum COREAUDIO = 11;
	public enum OPENSLES = 12;
	public enum VITA_HOMEBREW = 13;
	public enum MINIAUDIO = 14;
	public enum NOSOUND = 15;
	public enum NULLDRIVER = 16;
	public enum BACKEND_MAX = 17;
	public enum CLIP_ROUNDOFF = 1;
	public enum ENABLE_VISUALIZATION = 2;
	public enum LEFT_HANDED_3D = 4;
	public enum NO_FPU_REGISTER_CHANGE = 8;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Soloud(SoloudObject(Soloud_create()));
	}

	~this()
	{
		Soloud_destroy(objhandle);
	}

	public int init(uint aFlags = CLIP_ROUNDOFF, uint aBackend = AUTO, uint aSamplerate = AUTO, uint aBufferSize = AUTO, uint aChannels = 2)
	{
		return Soloud_initEx(objhandle, aFlags, aBackend, aSamplerate, aBufferSize, aChannels);
	}

	public void deinit()
	{
		Soloud_deinit(objhandle);
	}

	public uint getVersion()
	{
		return Soloud_getVersion(objhandle);
	}

	public const(char)* getErrorString(int aErrorCode)
	{
		return Soloud_getErrorString(objhandle, aErrorCode);
	}

	public uint getBackendId()
	{
		return Soloud_getBackendId(objhandle);
	}

	public const(char)* getBackendString()
	{
		return Soloud_getBackendString(objhandle);
	}

	public uint getBackendChannels()
	{
		return Soloud_getBackendChannels(objhandle);
	}

	public uint getBackendSamplerate()
	{
		return Soloud_getBackendSamplerate(objhandle);
	}

	public uint getBackendBufferSize()
	{
		return Soloud_getBackendBufferSize(objhandle);
	}

	public int setSpeakerPosition(uint aChannel, float aX, float aY, float aZ)
	{
		return Soloud_setSpeakerPosition(objhandle, aChannel, aX, aY, aZ);
	}

	public int getSpeakerPosition(uint aChannel, float[] aX, float[] aY, float[] aZ)
	{
		return Soloud_getSpeakerPosition(objhandle, aChannel, aX, aY, aZ);
	}

	public uint play(SoloudObject aSound, float aVolume = -1.0f, float aPan = 0.0f, int aPaused = 0, uint aBus = 0)
	{
		return Soloud_playEx(objhandle, aSound.objhandle, aVolume, aPan, aPaused, aBus);
	}

	public uint playClocked(double aSoundTime, SoloudObject aSound, float aVolume = -1.0f, float aPan = 0.0f, uint aBus = 0)
	{
		return Soloud_playClockedEx(objhandle, aSoundTime, aSound.objhandle, aVolume, aPan, aBus);
	}

	public uint play3d(SoloudObject aSound, float aPosX, float aPosY, float aPosZ, float aVelX = 0.0f, float aVelY = 0.0f, float aVelZ = 0.0f, float aVolume = 1.0f, int aPaused = 0, uint aBus = 0)
	{
		return Soloud_play3dEx(objhandle, aSound.objhandle, aPosX, aPosY, aPosZ, aVelX, aVelY, aVelZ, aVolume, aPaused, aBus);
	}

	public uint play3dClocked(double aSoundTime, SoloudObject aSound, float aPosX, float aPosY, float aPosZ, float aVelX = 0.0f, float aVelY = 0.0f, float aVelZ = 0.0f, float aVolume = 1.0f, uint aBus = 0)
	{
		return Soloud_play3dClockedEx(objhandle, aSoundTime, aSound.objhandle, aPosX, aPosY, aPosZ, aVelX, aVelY, aVelZ, aVolume, aBus);
	}

	public uint playBackground(SoloudObject aSound, float aVolume = -1.0f, int aPaused = 0, uint aBus = 0)
	{
		return Soloud_playBackgroundEx(objhandle, aSound.objhandle, aVolume, aPaused, aBus);
	}

	public int seek(uint aVoiceHandle, double aSeconds)
	{
		return Soloud_seek(objhandle, aVoiceHandle, aSeconds);
	}

	public void stop(uint aVoiceHandle)
	{
		Soloud_stop(objhandle, aVoiceHandle);
	}

	public void stopAll()
	{
		Soloud_stopAll(objhandle);
	}

	public void stopAudioSource(SoloudObject aSound)
	{
		Soloud_stopAudioSource(objhandle, aSound.objhandle);
	}

	public int countAudioSource(SoloudObject aSound)
	{
		return Soloud_countAudioSource(objhandle, aSound.objhandle);
	}

	public void setFilterParameter(uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aValue)
	{
		Soloud_setFilterParameter(objhandle, aVoiceHandle, aFilterId, aAttributeId, aValue);
	}

	public float getFilterParameter(uint aVoiceHandle, uint aFilterId, uint aAttributeId)
	{
		return Soloud_getFilterParameter(objhandle, aVoiceHandle, aFilterId, aAttributeId);
	}

	public void fadeFilterParameter(uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aTo, double aTime)
	{
		Soloud_fadeFilterParameter(objhandle, aVoiceHandle, aFilterId, aAttributeId, aTo, aTime);
	}

	public void oscillateFilterParameter(uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aFrom, float aTo, double aTime)
	{
		Soloud_oscillateFilterParameter(objhandle, aVoiceHandle, aFilterId, aAttributeId, aFrom, aTo, aTime);
	}

	public double getStreamTime(uint aVoiceHandle)
	{
		return Soloud_getStreamTime(objhandle, aVoiceHandle);
	}

	public double getStreamPosition(uint aVoiceHandle)
	{
		return Soloud_getStreamPosition(objhandle, aVoiceHandle);
	}

	public int getPause(uint aVoiceHandle)
	{
		return Soloud_getPause(objhandle, aVoiceHandle);
	}

	public float getVolume(uint aVoiceHandle)
	{
		return Soloud_getVolume(objhandle, aVoiceHandle);
	}

	public float getOverallVolume(uint aVoiceHandle)
	{
		return Soloud_getOverallVolume(objhandle, aVoiceHandle);
	}

	public float getPan(uint aVoiceHandle)
	{
		return Soloud_getPan(objhandle, aVoiceHandle);
	}

	public float getSamplerate(uint aVoiceHandle)
	{
		return Soloud_getSamplerate(objhandle, aVoiceHandle);
	}

	public int getProtectVoice(uint aVoiceHandle)
	{
		return Soloud_getProtectVoice(objhandle, aVoiceHandle);
	}

	public uint getActiveVoiceCount()
	{
		return Soloud_getActiveVoiceCount(objhandle);
	}

	public uint getVoiceCount()
	{
		return Soloud_getVoiceCount(objhandle);
	}

	public int isValidVoiceHandle(uint aVoiceHandle)
	{
		return Soloud_isValidVoiceHandle(objhandle, aVoiceHandle);
	}

	public float getRelativePlaySpeed(uint aVoiceHandle)
	{
		return Soloud_getRelativePlaySpeed(objhandle, aVoiceHandle);
	}

	public float getPostClipScaler()
	{
		return Soloud_getPostClipScaler(objhandle);
	}

	public float getGlobalVolume()
	{
		return Soloud_getGlobalVolume(objhandle);
	}

	public uint getMaxActiveVoiceCount()
	{
		return Soloud_getMaxActiveVoiceCount(objhandle);
	}

	public int getLooping(uint aVoiceHandle)
	{
		return Soloud_getLooping(objhandle, aVoiceHandle);
	}

	public double getLoopPoint(uint aVoiceHandle)
	{
		return Soloud_getLoopPoint(objhandle, aVoiceHandle);
	}

	public void setLoopPoint(uint aVoiceHandle, double aLoopPoint)
	{
		Soloud_setLoopPoint(objhandle, aVoiceHandle, aLoopPoint);
	}

	public void setLooping(uint aVoiceHandle, int aLooping)
	{
		Soloud_setLooping(objhandle, aVoiceHandle, aLooping);
	}

	public int setMaxActiveVoiceCount(uint aVoiceCount)
	{
		return Soloud_setMaxActiveVoiceCount(objhandle, aVoiceCount);
	}

	public void setInaudibleBehavior(uint aVoiceHandle, int aMustTick, int aKill)
	{
		Soloud_setInaudibleBehavior(objhandle, aVoiceHandle, aMustTick, aKill);
	}

	public void setGlobalVolume(float aVolume)
	{
		Soloud_setGlobalVolume(objhandle, aVolume);
	}

	public void setPostClipScaler(float aScaler)
	{
		Soloud_setPostClipScaler(objhandle, aScaler);
	}

	public void setPause(uint aVoiceHandle, int aPause)
	{
		Soloud_setPause(objhandle, aVoiceHandle, aPause);
	}

	public void setPauseAll(int aPause)
	{
		Soloud_setPauseAll(objhandle, aPause);
	}

	public int setRelativePlaySpeed(uint aVoiceHandle, float aSpeed)
	{
		return Soloud_setRelativePlaySpeed(objhandle, aVoiceHandle, aSpeed);
	}

	public void setProtectVoice(uint aVoiceHandle, int aProtect)
	{
		Soloud_setProtectVoice(objhandle, aVoiceHandle, aProtect);
	}

	public void setSamplerate(uint aVoiceHandle, float aSamplerate)
	{
		Soloud_setSamplerate(objhandle, aVoiceHandle, aSamplerate);
	}

	public void setPan(uint aVoiceHandle, float aPan)
	{
		Soloud_setPan(objhandle, aVoiceHandle, aPan);
	}

	public void setPanAbsolute(uint aVoiceHandle, float aLVolume, float aRVolume, float aLBVolume = 0, float aRBVolume = 0, float aCVolume = 0, float aSVolume = 0)
	{
		Soloud_setPanAbsoluteEx(objhandle, aVoiceHandle, aLVolume, aRVolume, aLBVolume, aRBVolume, aCVolume, aSVolume);
	}

	public void setVolume(uint aVoiceHandle, float aVolume)
	{
		Soloud_setVolume(objhandle, aVoiceHandle, aVolume);
	}

	public void setDelaySamples(uint aVoiceHandle, uint aSamples)
	{
		Soloud_setDelaySamples(objhandle, aVoiceHandle, aSamples);
	}

	public void fadeVolume(uint aVoiceHandle, float aTo, double aTime)
	{
		Soloud_fadeVolume(objhandle, aVoiceHandle, aTo, aTime);
	}

	public void fadePan(uint aVoiceHandle, float aTo, double aTime)
	{
		Soloud_fadePan(objhandle, aVoiceHandle, aTo, aTime);
	}

	public void fadeRelativePlaySpeed(uint aVoiceHandle, float aTo, double aTime)
	{
		Soloud_fadeRelativePlaySpeed(objhandle, aVoiceHandle, aTo, aTime);
	}

	public void fadeGlobalVolume(float aTo, double aTime)
	{
		Soloud_fadeGlobalVolume(objhandle, aTo, aTime);
	}

	public void schedulePause(uint aVoiceHandle, double aTime)
	{
		Soloud_schedulePause(objhandle, aVoiceHandle, aTime);
	}

	public void scheduleStop(uint aVoiceHandle, double aTime)
	{
		Soloud_scheduleStop(objhandle, aVoiceHandle, aTime);
	}

	public void oscillateVolume(uint aVoiceHandle, float aFrom, float aTo, double aTime)
	{
		Soloud_oscillateVolume(objhandle, aVoiceHandle, aFrom, aTo, aTime);
	}

	public void oscillatePan(uint aVoiceHandle, float aFrom, float aTo, double aTime)
	{
		Soloud_oscillatePan(objhandle, aVoiceHandle, aFrom, aTo, aTime);
	}

	public void oscillateRelativePlaySpeed(uint aVoiceHandle, float aFrom, float aTo, double aTime)
	{
		Soloud_oscillateRelativePlaySpeed(objhandle, aVoiceHandle, aFrom, aTo, aTime);
	}

	public void oscillateGlobalVolume(float aFrom, float aTo, double aTime)
	{
		Soloud_oscillateGlobalVolume(objhandle, aFrom, aTo, aTime);
	}

	public void setGlobalFilter(uint aFilterId, SoloudObject aFilter)
	{
		Soloud_setGlobalFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void setVisualizationEnable(int aEnable)
	{
		Soloud_setVisualizationEnable(objhandle, aEnable);
	}

	public float[] calcFFT()
	{
		return Soloud_calcFFT(objhandle);
	}

	public float[] getWave()
	{
		return Soloud_getWave(objhandle);
	}

	public float getApproximateVolume(uint aChannel)
	{
		return Soloud_getApproximateVolume(objhandle, aChannel);
	}

	public uint getLoopCount(uint aVoiceHandle)
	{
		return Soloud_getLoopCount(objhandle, aVoiceHandle);
	}

	public float getInfo(uint aVoiceHandle, uint aInfoKey)
	{
		return Soloud_getInfo(objhandle, aVoiceHandle, aInfoKey);
	}

	public uint createVoiceGroup()
	{
		return Soloud_createVoiceGroup(objhandle);
	}

	public int destroyVoiceGroup(uint aVoiceGroupHandle)
	{
		return Soloud_destroyVoiceGroup(objhandle, aVoiceGroupHandle);
	}

	public int addVoiceToGroup(uint aVoiceGroupHandle, uint aVoiceHandle)
	{
		return Soloud_addVoiceToGroup(objhandle, aVoiceGroupHandle, aVoiceHandle);
	}

	public int isVoiceGroup(uint aVoiceGroupHandle)
	{
		return Soloud_isVoiceGroup(objhandle, aVoiceGroupHandle);
	}

	public int isVoiceGroupEmpty(uint aVoiceGroupHandle)
	{
		return Soloud_isVoiceGroupEmpty(objhandle, aVoiceGroupHandle);
	}

	public void update3dAudio()
	{
		Soloud_update3dAudio(objhandle);
	}

	public int set3dSoundSpeed(float aSpeed)
	{
		return Soloud_set3dSoundSpeed(objhandle, aSpeed);
	}

	public float get3dSoundSpeed()
	{
		return Soloud_get3dSoundSpeed(objhandle);
	}

	public void set3dListenerParameters(float aPosX, float aPosY, float aPosZ, float aAtX, float aAtY, float aAtZ, float aUpX, float aUpY, float aUpZ, float aVelocityX = 0.0f, float aVelocityY = 0.0f, float aVelocityZ = 0.0f)
	{
		Soloud_set3dListenerParametersEx(objhandle, aPosX, aPosY, aPosZ, aAtX, aAtY, aAtZ, aUpX, aUpY, aUpZ, aVelocityX, aVelocityY, aVelocityZ);
	}

	public void set3dListenerPosition(float aPosX, float aPosY, float aPosZ)
	{
		Soloud_set3dListenerPosition(objhandle, aPosX, aPosY, aPosZ);
	}

	public void set3dListenerAt(float aAtX, float aAtY, float aAtZ)
	{
		Soloud_set3dListenerAt(objhandle, aAtX, aAtY, aAtZ);
	}

	public void set3dListenerUp(float aUpX, float aUpY, float aUpZ)
	{
		Soloud_set3dListenerUp(objhandle, aUpX, aUpY, aUpZ);
	}

	public void set3dListenerVelocity(float aVelocityX, float aVelocityY, float aVelocityZ)
	{
		Soloud_set3dListenerVelocity(objhandle, aVelocityX, aVelocityY, aVelocityZ);
	}

	public void set3dSourceParameters(uint aVoiceHandle, float aPosX, float aPosY, float aPosZ, float aVelocityX = 0.0f, float aVelocityY = 0.0f, float aVelocityZ = 0.0f)
	{
		Soloud_set3dSourceParametersEx(objhandle, aVoiceHandle, aPosX, aPosY, aPosZ, aVelocityX, aVelocityY, aVelocityZ);
	}

	public void set3dSourcePosition(uint aVoiceHandle, float aPosX, float aPosY, float aPosZ)
	{
		Soloud_set3dSourcePosition(objhandle, aVoiceHandle, aPosX, aPosY, aPosZ);
	}

	public void set3dSourceVelocity(uint aVoiceHandle, float aVelocityX, float aVelocityY, float aVelocityZ)
	{
		Soloud_set3dSourceVelocity(objhandle, aVoiceHandle, aVelocityX, aVelocityY, aVelocityZ);
	}

	public void set3dSourceMinMaxDistance(uint aVoiceHandle, float aMinDistance, float aMaxDistance)
	{
		Soloud_set3dSourceMinMaxDistance(objhandle, aVoiceHandle, aMinDistance, aMaxDistance);
	}

	public void set3dSourceAttenuation(uint aVoiceHandle, uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Soloud_set3dSourceAttenuation(objhandle, aVoiceHandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dSourceDopplerFactor(uint aVoiceHandle, float aDopplerFactor)
	{
		Soloud_set3dSourceDopplerFactor(objhandle, aVoiceHandle, aDopplerFactor);
	}

	public void mix(float[] aBuffer, uint aSamples)
	{
		Soloud_mix(objhandle, aBuffer, aSamples);
	}

	public void mixSigned16(short[] aBuffer, uint aSamples)
	{
		Soloud_mixSigned16(objhandle, aBuffer, aSamples);
	}

}

public struct BassboostFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum BOOST = 1;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return BassboostFilter(SoloudObject(BassboostFilter_create()));
	}

	~this()
	{
		BassboostFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return BassboostFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return BassboostFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return BassboostFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return BassboostFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return BassboostFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(float aBoost)
	{
		return BassboostFilter_setParams(objhandle, aBoost);
	}

}

public struct BiquadResonantFilter
{
pure @safe nothrow @nogc:
	public enum LOWPASS = 0;
	public enum HIGHPASS = 1;
	public enum BANDPASS = 2;
	public enum WET = 0;
	public enum TYPE = 1;
	public enum FREQUENCY = 2;
	public enum RESONANCE = 3;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return BiquadResonantFilter(SoloudObject(BiquadResonantFilter_create()));
	}

	~this()
	{
		BiquadResonantFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return BiquadResonantFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return BiquadResonantFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return BiquadResonantFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return BiquadResonantFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return BiquadResonantFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(int aType, float aFrequency, float aResonance)
	{
		return BiquadResonantFilter_setParams(objhandle, aType, aFrequency, aResonance);
	}

}

public struct Bus
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Bus(SoloudObject(Bus_create()));
	}

	~this()
	{
		Bus_destroy(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Bus_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public uint play(SoloudObject aSound, float aVolume = 1.0f, float aPan = 0.0f, int aPaused = 0)
	{
		return Bus_playEx(objhandle, aSound.objhandle, aVolume, aPan, aPaused);
	}

	public uint playClocked(double aSoundTime, SoloudObject aSound, float aVolume = 1.0f, float aPan = 0.0f)
	{
		return Bus_playClockedEx(objhandle, aSoundTime, aSound.objhandle, aVolume, aPan);
	}

	public uint play3d(SoloudObject aSound, float aPosX, float aPosY, float aPosZ, float aVelX = 0.0f, float aVelY = 0.0f, float aVelZ = 0.0f, float aVolume = 1.0f, int aPaused = 0)
	{
		return Bus_play3dEx(objhandle, aSound.objhandle, aPosX, aPosY, aPosZ, aVelX, aVelY, aVelZ, aVolume, aPaused);
	}

	public uint play3dClocked(double aSoundTime, SoloudObject aSound, float aPosX, float aPosY, float aPosZ, float aVelX = 0.0f, float aVelY = 0.0f, float aVelZ = 0.0f, float aVolume = 1.0f)
	{
		return Bus_play3dClockedEx(objhandle, aSoundTime, aSound.objhandle, aPosX, aPosY, aPosZ, aVelX, aVelY, aVelZ, aVolume);
	}

	public int setChannels(uint aChannels)
	{
		return Bus_setChannels(objhandle, aChannels);
	}

	public void setVisualizationEnable(int aEnable)
	{
		Bus_setVisualizationEnable(objhandle, aEnable);
	}

	public void annexSound(uint aVoiceHandle)
	{
		Bus_annexSound(objhandle, aVoiceHandle);
	}

	public float[] calcFFT()
	{
		return Bus_calcFFT(objhandle);
	}

	public float[] getWave()
	{
		return Bus_getWave(objhandle);
	}

	public float getApproximateVolume(uint aChannel)
	{
		return Bus_getApproximateVolume(objhandle, aChannel);
	}

	public uint getActiveVoiceCount()
	{
		return Bus_getActiveVoiceCount(objhandle);
	}

	public void setVolume(float aVolume)
	{
		Bus_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Bus_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Bus_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Bus_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Bus_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Bus_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Bus_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Bus_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Bus_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Bus_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Bus_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Bus_getLoopPoint(objhandle);
	}

	public void stop()
	{
		Bus_stop(objhandle);
	}

}

public struct DCRemovalFilter
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return DCRemovalFilter(SoloudObject(DCRemovalFilter_create()));
	}

	~this()
	{
		DCRemovalFilter_destroy(objhandle);
	}

	public int setParams(float aLength = 0.1f)
	{
		return DCRemovalFilter_setParamsEx(objhandle, aLength);
	}

	public int getParamCount()
	{
		return DCRemovalFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return DCRemovalFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return DCRemovalFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return DCRemovalFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return DCRemovalFilter_getParamMin(objhandle, aParamIndex);
	}

}

public struct EchoFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum DELAY = 1;
	public enum DECAY = 2;
	public enum FILTER = 3;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return EchoFilter(SoloudObject(EchoFilter_create()));
	}

	~this()
	{
		EchoFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return EchoFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return EchoFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return EchoFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return EchoFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return EchoFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(float aDelay, float aDecay = 0.7f, float aFilter = 0.0f)
	{
		return EchoFilter_setParamsEx(objhandle, aDelay, aDecay, aFilter);
	}

}

public struct FFTFilter
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return FFTFilter(SoloudObject(FFTFilter_create()));
	}

	~this()
	{
		FFTFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return FFTFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return FFTFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return FFTFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return FFTFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return FFTFilter_getParamMin(objhandle, aParamIndex);
	}

}

public struct FlangerFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum DELAY = 1;
	public enum FREQ = 2;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return FlangerFilter(SoloudObject(FlangerFilter_create()));
	}

	~this()
	{
		FlangerFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return FlangerFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return FlangerFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return FlangerFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return FlangerFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return FlangerFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(float aDelay, float aFreq)
	{
		return FlangerFilter_setParams(objhandle, aDelay, aFreq);
	}

}

public struct FreeverbFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum FREEZE = 1;
	public enum ROOMSIZE = 2;
	public enum DAMP = 3;
	public enum WIDTH = 4;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return FreeverbFilter(SoloudObject(FreeverbFilter_create()));
	}

	~this()
	{
		FreeverbFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return FreeverbFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return FreeverbFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return FreeverbFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return FreeverbFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return FreeverbFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(float aMode, float aRoomSize, float aDamp, float aWidth)
	{
		return FreeverbFilter_setParams(objhandle, aMode, aRoomSize, aDamp, aWidth);
	}

}

public struct LofiFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum SAMPLERATE = 1;
	public enum BITDEPTH = 2;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return LofiFilter(SoloudObject(LofiFilter_create()));
	}

	~this()
	{
		LofiFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return LofiFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return LofiFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return LofiFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return LofiFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return LofiFilter_getParamMin(objhandle, aParamIndex);
	}

	public int setParams(float aSampleRate, float aBitdepth)
	{
		return LofiFilter_setParams(objhandle, aSampleRate, aBitdepth);
	}

}

public struct Monotone
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Monotone(SoloudObject(Monotone_create()));
	}

	~this()
	{
		Monotone_destroy(objhandle);
	}

	public int setParams(int aHardwareChannels, int aWaveform = SoLoud::Misc::WAVE_SQUARE)
	{
		return Monotone_setParamsEx(objhandle, aHardwareChannels, aWaveform);
	}

	public int load(const(char)* aFilename)
	{
		return Monotone_load(objhandle, aFilename);
	}

	public int loadMem(ubyte* aMem, uint aLength, int aCopy = false, int aTakeOwnership = true)
	{
		return Monotone_loadMemEx(objhandle, aMem, aLength, aCopy, aTakeOwnership);
	}

	public int loadFile(SoloudObject aFile)
	{
		return Monotone_loadFile(objhandle, aFile.objhandle);
	}

	public void setVolume(float aVolume)
	{
		Monotone_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Monotone_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Monotone_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Monotone_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Monotone_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Monotone_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Monotone_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Monotone_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Monotone_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Monotone_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Monotone_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Monotone_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Monotone_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Monotone_stop(objhandle);
	}

}

public struct Noise
{
pure @safe nothrow @nogc:
	public enum WHITE = 0;
	public enum PINK = 1;
	public enum BROWNISH = 2;
	public enum BLUEISH = 3;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Noise(SoloudObject(Noise_create()));
	}

	~this()
	{
		Noise_destroy(objhandle);
	}

	public void setOctaveScale(float aOct0, float aOct1, float aOct2, float aOct3, float aOct4, float aOct5, float aOct6, float aOct7, float aOct8, float aOct9)
	{
		Noise_setOctaveScale(objhandle, aOct0, aOct1, aOct2, aOct3, aOct4, aOct5, aOct6, aOct7, aOct8, aOct9);
	}

	public void setType(int aType)
	{
		Noise_setType(objhandle, aType);
	}

	public void setVolume(float aVolume)
	{
		Noise_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Noise_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Noise_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Noise_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Noise_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Noise_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Noise_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Noise_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Noise_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Noise_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Noise_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Noise_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Noise_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Noise_stop(objhandle);
	}

}

public struct Openmpt
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Openmpt(SoloudObject(Openmpt_create()));
	}

	~this()
	{
		Openmpt_destroy(objhandle);
	}

	public int load(const(char)* aFilename)
	{
		return Openmpt_load(objhandle, aFilename);
	}

	public int loadMem(ubyte* aMem, uint aLength, int aCopy = false, int aTakeOwnership = true)
	{
		return Openmpt_loadMemEx(objhandle, aMem, aLength, aCopy, aTakeOwnership);
	}

	public int loadFile(SoloudObject aFile)
	{
		return Openmpt_loadFile(objhandle, aFile.objhandle);
	}

	public void setVolume(float aVolume)
	{
		Openmpt_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Openmpt_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Openmpt_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Openmpt_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Openmpt_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Openmpt_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Openmpt_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Openmpt_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Openmpt_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Openmpt_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Openmpt_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Openmpt_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Openmpt_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Openmpt_stop(objhandle);
	}

}

public struct Queue
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Queue(SoloudObject(Queue_create()));
	}

	~this()
	{
		Queue_destroy(objhandle);
	}

	public int play(SoloudObject aSound)
	{
		return Queue_play(objhandle, aSound.objhandle);
	}

	public uint getQueueCount()
	{
		return Queue_getQueueCount(objhandle);
	}

	public int isCurrentlyPlaying(SoloudObject aSound)
	{
		return Queue_isCurrentlyPlaying(objhandle, aSound.objhandle);
	}

	public int setParamsFromAudioSource(SoloudObject aSound)
	{
		return Queue_setParamsFromAudioSource(objhandle, aSound.objhandle);
	}

	public int setParams(float aSamplerate, uint aChannels = 2)
	{
		return Queue_setParamsEx(objhandle, aSamplerate, aChannels);
	}

	public void setVolume(float aVolume)
	{
		Queue_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Queue_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Queue_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Queue_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Queue_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Queue_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Queue_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Queue_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Queue_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Queue_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Queue_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Queue_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Queue_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Queue_stop(objhandle);
	}

}

public struct RobotizeFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum FREQ = 1;
	public enum WAVE = 2;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return RobotizeFilter(SoloudObject(RobotizeFilter_create()));
	}

	~this()
	{
		RobotizeFilter_destroy(objhandle);
	}

	public int getParamCount()
	{
		return RobotizeFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return RobotizeFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return RobotizeFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return RobotizeFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return RobotizeFilter_getParamMin(objhandle, aParamIndex);
	}

	public void setParams(float aFreq, int aWaveform)
	{
		RobotizeFilter_setParams(objhandle, aFreq, aWaveform);
	}

}

public struct Sfxr
{
pure @safe nothrow @nogc:
	public enum COIN = 0;
	public enum LASER = 1;
	public enum EXPLOSION = 2;
	public enum POWERUP = 3;
	public enum HURT = 4;
	public enum JUMP = 5;
	public enum BLIP = 6;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Sfxr(SoloudObject(Sfxr_create()));
	}

	~this()
	{
		Sfxr_destroy(objhandle);
	}

	public void resetParams()
	{
		Sfxr_resetParams(objhandle);
	}

	public int loadParams(const(char)* aFilename)
	{
		return Sfxr_loadParams(objhandle, aFilename);
	}

	public int loadParamsMem(ubyte* aMem, uint aLength, int aCopy = false, int aTakeOwnership = true)
	{
		return Sfxr_loadParamsMemEx(objhandle, aMem, aLength, aCopy, aTakeOwnership);
	}

	public int loadParamsFile(SoloudObject aFile)
	{
		return Sfxr_loadParamsFile(objhandle, aFile.objhandle);
	}

	public int loadPreset(int aPresetNo, int aRandSeed)
	{
		return Sfxr_loadPreset(objhandle, aPresetNo, aRandSeed);
	}

	public void setVolume(float aVolume)
	{
		Sfxr_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Sfxr_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Sfxr_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Sfxr_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Sfxr_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Sfxr_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Sfxr_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Sfxr_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Sfxr_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Sfxr_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Sfxr_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Sfxr_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Sfxr_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Sfxr_stop(objhandle);
	}

}

public struct Speech
{
pure @safe nothrow @nogc:
	public enum KW_SAW = 0;
	public enum KW_TRIANGLE = 1;
	public enum KW_SIN = 2;
	public enum KW_SQUARE = 3;
	public enum KW_PULSE = 4;
	public enum KW_NOISE = 5;
	public enum KW_WARBLE = 6;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Speech(SoloudObject(Speech_create()));
	}

	~this()
	{
		Speech_destroy(objhandle);
	}

	public int setText(const(char)* aText)
	{
		return Speech_setText(objhandle, aText);
	}

	public int setParams(uint aBaseFrequency = 1330, float aBaseSpeed = 10.0f, float aBaseDeclination = 0.5f, int aBaseWaveform = KW_TRIANGLE)
	{
		return Speech_setParamsEx(objhandle, aBaseFrequency, aBaseSpeed, aBaseDeclination, aBaseWaveform);
	}

	public void setVolume(float aVolume)
	{
		Speech_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Speech_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Speech_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Speech_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Speech_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Speech_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Speech_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Speech_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Speech_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Speech_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Speech_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Speech_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Speech_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Speech_stop(objhandle);
	}

}

public struct TedSid
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return TedSid(SoloudObject(TedSid_create()));
	}

	~this()
	{
		TedSid_destroy(objhandle);
	}

	public int load(const(char)* aFilename)
	{
		return TedSid_load(objhandle, aFilename);
	}

	public int loadToMem(const(char)* aFilename)
	{
		return TedSid_loadToMem(objhandle, aFilename);
	}

	public int loadMem(ubyte* aMem, uint aLength, int aCopy = false, int aTakeOwnership = true)
	{
		return TedSid_loadMemEx(objhandle, aMem, aLength, aCopy, aTakeOwnership);
	}

	public int loadFileToMem(SoloudObject aFile)
	{
		return TedSid_loadFileToMem(objhandle, aFile.objhandle);
	}

	public int loadFile(SoloudObject aFile)
	{
		return TedSid_loadFile(objhandle, aFile.objhandle);
	}

	public void setVolume(float aVolume)
	{
		TedSid_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		TedSid_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		TedSid_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		TedSid_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		TedSid_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		TedSid_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		TedSid_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		TedSid_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		TedSid_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		TedSid_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		TedSid_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return TedSid_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		TedSid_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		TedSid_stop(objhandle);
	}

}

public struct Vic
{
pure @safe nothrow @nogc:
	public enum PAL = 0;
	public enum NTSC = 1;
	public enum BASS = 0;
	public enum ALTO = 1;
	public enum SOPRANO = 2;
	public enum NOISE = 3;
	public enum MAX_REGS = 4;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Vic(SoloudObject(Vic_create()));
	}

	~this()
	{
		Vic_destroy(objhandle);
	}

	public void setModel(int model)
	{
		Vic_setModel(objhandle, model);
	}

	public int getModel()
	{
		return Vic_getModel(objhandle);
	}

	public void setRegister(int reg, ubyte value)
	{
		Vic_setRegister(objhandle, reg, value);
	}

	public ubyte getRegister(int reg)
	{
		return Vic_getRegister(objhandle, reg);
	}

	public void setVolume(float aVolume)
	{
		Vic_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Vic_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Vic_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Vic_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Vic_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Vic_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Vic_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Vic_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Vic_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Vic_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Vic_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Vic_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Vic_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Vic_stop(objhandle);
	}

}

public struct Vizsn
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Vizsn(SoloudObject(Vizsn_create()));
	}

	~this()
	{
		Vizsn_destroy(objhandle);
	}

	public void setText(char* aText)
	{
		Vizsn_setText(objhandle, aText);
	}

	public void setVolume(float aVolume)
	{
		Vizsn_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Vizsn_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Vizsn_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Vizsn_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Vizsn_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Vizsn_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Vizsn_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Vizsn_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Vizsn_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Vizsn_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Vizsn_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Vizsn_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Vizsn_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Vizsn_stop(objhandle);
	}

}

public struct Wav
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return Wav(SoloudObject(Wav_create()));
	}

	~this()
	{
		Wav_destroy(objhandle);
	}

	public int load(const(char)* aFilename)
	{
		return Wav_load(objhandle, aFilename);
	}

	public int loadMem(ubyte* aMem, uint aLength, int aCopy = false, int aTakeOwnership = true)
	{
		return Wav_loadMemEx(objhandle, aMem, aLength, aCopy, aTakeOwnership);
	}

	public int loadFile(SoloudObject aFile)
	{
		return Wav_loadFile(objhandle, aFile.objhandle);
	}

	public int loadRawWave8(ubyte* aMem, uint aLength, float aSamplerate = 44100.0f, uint aChannels = 1)
	{
		return Wav_loadRawWave8Ex(objhandle, aMem, aLength, aSamplerate, aChannels);
	}

	public int loadRawWave16(short[] aMem, uint aLength, float aSamplerate = 44100.0f, uint aChannels = 1)
	{
		return Wav_loadRawWave16Ex(objhandle, aMem, aLength, aSamplerate, aChannels);
	}

	public int loadRawWave(float[] aMem, uint aLength, float aSamplerate = 44100.0f, uint aChannels = 1, int aCopy = false, int aTakeOwnership = true)
	{
		return Wav_loadRawWaveEx(objhandle, aMem, aLength, aSamplerate, aChannels, aCopy, aTakeOwnership);
	}

	public double getLength()
	{
		return Wav_getLength(objhandle);
	}

	public void setVolume(float aVolume)
	{
		Wav_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		Wav_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		Wav_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		Wav_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		Wav_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		Wav_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		Wav_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		Wav_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		Wav_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		Wav_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		Wav_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return Wav_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		Wav_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		Wav_stop(objhandle);
	}

}

public struct WaveShaperFilter
{
pure @safe nothrow @nogc:
	public enum WET = 0;
	public enum AMOUNT = 1;

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return WaveShaperFilter(SoloudObject(WaveShaperFilter_create()));
	}

	~this()
	{
		WaveShaperFilter_destroy(objhandle);
	}

	public int setParams(float aAmount)
	{
		return WaveShaperFilter_setParams(objhandle, aAmount);
	}

	public int getParamCount()
	{
		return WaveShaperFilter_getParamCount(objhandle);
	}

	public const(char)* getParamName(uint aParamIndex)
	{
		return WaveShaperFilter_getParamName(objhandle, aParamIndex);
	}

	public uint getParamType(uint aParamIndex)
	{
		return WaveShaperFilter_getParamType(objhandle, aParamIndex);
	}

	public float getParamMax(uint aParamIndex)
	{
		return WaveShaperFilter_getParamMax(objhandle, aParamIndex);
	}

	public float getParamMin(uint aParamIndex)
	{
		return WaveShaperFilter_getParamMin(objhandle, aParamIndex);
	}

}

public struct WavStream
{
pure @safe nothrow @nogc:

	public SoloudObject soloudObject;
	alias soloudObject this;

	public static create()
	{
		return WavStream(SoloudObject(WavStream_create()));
	}

	~this()
	{
		WavStream_destroy(objhandle);
	}

	public int load(const(char)* aFilename)
	{
		return WavStream_load(objhandle, aFilename);
	}

	public int loadMem(ubyte* aData, uint aDataLen, int aCopy = false, int aTakeOwnership = true)
	{
		return WavStream_loadMemEx(objhandle, aData, aDataLen, aCopy, aTakeOwnership);
	}

	public int loadToMem(const(char)* aFilename)
	{
		return WavStream_loadToMem(objhandle, aFilename);
	}

	public int loadFile(SoloudObject aFile)
	{
		return WavStream_loadFile(objhandle, aFile.objhandle);
	}

	public int loadFileToMem(SoloudObject aFile)
	{
		return WavStream_loadFileToMem(objhandle, aFile.objhandle);
	}

	public double getLength()
	{
		return WavStream_getLength(objhandle);
	}

	public void setVolume(float aVolume)
	{
		WavStream_setVolume(objhandle, aVolume);
	}

	public void setLooping(int aLoop)
	{
		WavStream_setLooping(objhandle, aLoop);
	}

	public void set3dMinMaxDistance(float aMinDistance, float aMaxDistance)
	{
		WavStream_set3dMinMaxDistance(objhandle, aMinDistance, aMaxDistance);
	}

	public void set3dAttenuation(uint aAttenuationModel, float aAttenuationRolloffFactor)
	{
		WavStream_set3dAttenuation(objhandle, aAttenuationModel, aAttenuationRolloffFactor);
	}

	public void set3dDopplerFactor(float aDopplerFactor)
	{
		WavStream_set3dDopplerFactor(objhandle, aDopplerFactor);
	}

	public void set3dListenerRelative(int aListenerRelative)
	{
		WavStream_set3dListenerRelative(objhandle, aListenerRelative);
	}

	public void set3dDistanceDelay(int aDistanceDelay)
	{
		WavStream_set3dDistanceDelay(objhandle, aDistanceDelay);
	}

	public void set3dCollider(SoloudObject aCollider, int aUserData = 0)
	{
		WavStream_set3dColliderEx(objhandle, aCollider.objhandle, aUserData);
	}

	public void set3dAttenuator(SoloudObject aAttenuator)
	{
		WavStream_set3dAttenuator(objhandle, aAttenuator.objhandle);
	}

	public void setInaudibleBehavior(int aMustTick, int aKill)
	{
		WavStream_setInaudibleBehavior(objhandle, aMustTick, aKill);
	}

	public void setLoopPoint(double aLoopPoint)
	{
		WavStream_setLoopPoint(objhandle, aLoopPoint);
	}

	public double getLoopPoint()
	{
		return WavStream_getLoopPoint(objhandle);
	}

	public void setFilter(uint aFilterId, SoloudObject aFilter)
	{
		WavStream_setFilter(objhandle, aFilterId, aFilter.objhandle);
	}

	public void stop()
	{
		WavStream_stop(objhandle);
	}

}
private static extern(C) int* Soloud_create();
private static extern(C) int* Soloud_destroy(int* aObjHandle);
private static extern(C) int Soloud_initEx(int* aObjHandle, uint aFlags, uint aBackend, uint aSamplerate, uint aBufferSize, uint aChannels);
private static extern(C) void Soloud_deinit(int* aObjHandle);
private static extern(C) uint Soloud_getVersion(int* aObjHandle);
private static extern(C) const(char)* Soloud_getErrorString(int* aObjHandle, int aErrorCode);
private static extern(C) uint Soloud_getBackendId(int* aObjHandle);
private static extern(C) const(char)* Soloud_getBackendString(int* aObjHandle);
private static extern(C) uint Soloud_getBackendChannels(int* aObjHandle);
private static extern(C) uint Soloud_getBackendSamplerate(int* aObjHandle);
private static extern(C) uint Soloud_getBackendBufferSize(int* aObjHandle);
private static extern(C) int Soloud_setSpeakerPosition(int* aObjHandle, uint aChannel, float aX, float aY, float aZ);
private static extern(C) int Soloud_getSpeakerPosition(int* aObjHandle, uint aChannel, float[] aX, float[] aY, float[] aZ);
private static extern(C) uint Soloud_playEx(int* aObjHandle, int* aSound, float aVolume, float aPan, int aPaused, uint aBus);
private static extern(C) uint Soloud_playClockedEx(int* aObjHandle, double aSoundTime, int* aSound, float aVolume, float aPan, uint aBus);
private static extern(C) uint Soloud_play3dEx(int* aObjHandle, int* aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, int aPaused, uint aBus);
private static extern(C) uint Soloud_play3dClockedEx(int* aObjHandle, double aSoundTime, int* aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, uint aBus);
private static extern(C) uint Soloud_playBackgroundEx(int* aObjHandle, int* aSound, float aVolume, int aPaused, uint aBus);
private static extern(C) int Soloud_seek(int* aObjHandle, uint aVoiceHandle, double aSeconds);
private static extern(C) void Soloud_stop(int* aObjHandle, uint aVoiceHandle);
private static extern(C) void Soloud_stopAll(int* aObjHandle);
private static extern(C) void Soloud_stopAudioSource(int* aObjHandle, int* aSound);
private static extern(C) int Soloud_countAudioSource(int* aObjHandle, int* aSound);
private static extern(C) void Soloud_setFilterParameter(int* aObjHandle, uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aValue);
private static extern(C) float Soloud_getFilterParameter(int* aObjHandle, uint aVoiceHandle, uint aFilterId, uint aAttributeId);
private static extern(C) void Soloud_fadeFilterParameter(int* aObjHandle, uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aTo, double aTime);
private static extern(C) void Soloud_oscillateFilterParameter(int* aObjHandle, uint aVoiceHandle, uint aFilterId, uint aAttributeId, float aFrom, float aTo, double aTime);
private static extern(C) double Soloud_getStreamTime(int* aObjHandle, uint aVoiceHandle);
private static extern(C) double Soloud_getStreamPosition(int* aObjHandle, uint aVoiceHandle);
private static extern(C) int Soloud_getPause(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getVolume(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getOverallVolume(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getPan(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getSamplerate(int* aObjHandle, uint aVoiceHandle);
private static extern(C) int Soloud_getProtectVoice(int* aObjHandle, uint aVoiceHandle);
private static extern(C) uint Soloud_getActiveVoiceCount(int* aObjHandle);
private static extern(C) uint Soloud_getVoiceCount(int* aObjHandle);
private static extern(C) int Soloud_isValidVoiceHandle(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getRelativePlaySpeed(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getPostClipScaler(int* aObjHandle);
private static extern(C) float Soloud_getGlobalVolume(int* aObjHandle);
private static extern(C) uint Soloud_getMaxActiveVoiceCount(int* aObjHandle);
private static extern(C) int Soloud_getLooping(int* aObjHandle, uint aVoiceHandle);
private static extern(C) double Soloud_getLoopPoint(int* aObjHandle, uint aVoiceHandle);
private static extern(C) void Soloud_setLoopPoint(int* aObjHandle, uint aVoiceHandle, double aLoopPoint);
private static extern(C) void Soloud_setLooping(int* aObjHandle, uint aVoiceHandle, int aLooping);
private static extern(C) int Soloud_setMaxActiveVoiceCount(int* aObjHandle, uint aVoiceCount);
private static extern(C) void Soloud_setInaudibleBehavior(int* aObjHandle, uint aVoiceHandle, int aMustTick, int aKill);
private static extern(C) void Soloud_setGlobalVolume(int* aObjHandle, float aVolume);
private static extern(C) void Soloud_setPostClipScaler(int* aObjHandle, float aScaler);
private static extern(C) void Soloud_setPause(int* aObjHandle, uint aVoiceHandle, int aPause);
private static extern(C) void Soloud_setPauseAll(int* aObjHandle, int aPause);
private static extern(C) int Soloud_setRelativePlaySpeed(int* aObjHandle, uint aVoiceHandle, float aSpeed);
private static extern(C) void Soloud_setProtectVoice(int* aObjHandle, uint aVoiceHandle, int aProtect);
private static extern(C) void Soloud_setSamplerate(int* aObjHandle, uint aVoiceHandle, float aSamplerate);
private static extern(C) void Soloud_setPan(int* aObjHandle, uint aVoiceHandle, float aPan);
private static extern(C) void Soloud_setPanAbsoluteEx(int* aObjHandle, uint aVoiceHandle, float aLVolume, float aRVolume, float aLBVolume, float aRBVolume, float aCVolume, float aSVolume);
private static extern(C) void Soloud_setVolume(int* aObjHandle, uint aVoiceHandle, float aVolume);
private static extern(C) void Soloud_setDelaySamples(int* aObjHandle, uint aVoiceHandle, uint aSamples);
private static extern(C) void Soloud_fadeVolume(int* aObjHandle, uint aVoiceHandle, float aTo, double aTime);
private static extern(C) void Soloud_fadePan(int* aObjHandle, uint aVoiceHandle, float aTo, double aTime);
private static extern(C) void Soloud_fadeRelativePlaySpeed(int* aObjHandle, uint aVoiceHandle, float aTo, double aTime);
private static extern(C) void Soloud_fadeGlobalVolume(int* aObjHandle, float aTo, double aTime);
private static extern(C) void Soloud_schedulePause(int* aObjHandle, uint aVoiceHandle, double aTime);
private static extern(C) void Soloud_scheduleStop(int* aObjHandle, uint aVoiceHandle, double aTime);
private static extern(C) void Soloud_oscillateVolume(int* aObjHandle, uint aVoiceHandle, float aFrom, float aTo, double aTime);
private static extern(C) void Soloud_oscillatePan(int* aObjHandle, uint aVoiceHandle, float aFrom, float aTo, double aTime);
private static extern(C) void Soloud_oscillateRelativePlaySpeed(int* aObjHandle, uint aVoiceHandle, float aFrom, float aTo, double aTime);
private static extern(C) void Soloud_oscillateGlobalVolume(int* aObjHandle, float aFrom, float aTo, double aTime);
private static extern(C) void Soloud_setGlobalFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Soloud_setVisualizationEnable(int* aObjHandle, int aEnable);
private static extern(C) float[] Soloud_calcFFT(int* aObjHandle);
private static extern(C) float[] Soloud_getWave(int* aObjHandle);
private static extern(C) float Soloud_getApproximateVolume(int* aObjHandle, uint aChannel);
private static extern(C) uint Soloud_getLoopCount(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float Soloud_getInfo(int* aObjHandle, uint aVoiceHandle, uint aInfoKey);
private static extern(C) uint Soloud_createVoiceGroup(int* aObjHandle);
private static extern(C) int Soloud_destroyVoiceGroup(int* aObjHandle, uint aVoiceGroupHandle);
private static extern(C) int Soloud_addVoiceToGroup(int* aObjHandle, uint aVoiceGroupHandle, uint aVoiceHandle);
private static extern(C) int Soloud_isVoiceGroup(int* aObjHandle, uint aVoiceGroupHandle);
private static extern(C) int Soloud_isVoiceGroupEmpty(int* aObjHandle, uint aVoiceGroupHandle);
private static extern(C) void Soloud_update3dAudio(int* aObjHandle);
private static extern(C) int Soloud_set3dSoundSpeed(int* aObjHandle, float aSpeed);
private static extern(C) float Soloud_get3dSoundSpeed(int* aObjHandle);
private static extern(C) void Soloud_set3dListenerParametersEx(int* aObjHandle, float aPosX, float aPosY, float aPosZ, float aAtX, float aAtY, float aAtZ, float aUpX, float aUpY, float aUpZ, float aVelocityX, float aVelocityY, float aVelocityZ);
private static extern(C) void Soloud_set3dListenerPosition(int* aObjHandle, float aPosX, float aPosY, float aPosZ);
private static extern(C) void Soloud_set3dListenerAt(int* aObjHandle, float aAtX, float aAtY, float aAtZ);
private static extern(C) void Soloud_set3dListenerUp(int* aObjHandle, float aUpX, float aUpY, float aUpZ);
private static extern(C) void Soloud_set3dListenerVelocity(int* aObjHandle, float aVelocityX, float aVelocityY, float aVelocityZ);
private static extern(C) void Soloud_set3dSourceParametersEx(int* aObjHandle, uint aVoiceHandle, float aPosX, float aPosY, float aPosZ, float aVelocityX, float aVelocityY, float aVelocityZ);
private static extern(C) void Soloud_set3dSourcePosition(int* aObjHandle, uint aVoiceHandle, float aPosX, float aPosY, float aPosZ);
private static extern(C) void Soloud_set3dSourceVelocity(int* aObjHandle, uint aVoiceHandle, float aVelocityX, float aVelocityY, float aVelocityZ);
private static extern(C) void Soloud_set3dSourceMinMaxDistance(int* aObjHandle, uint aVoiceHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Soloud_set3dSourceAttenuation(int* aObjHandle, uint aVoiceHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Soloud_set3dSourceDopplerFactor(int* aObjHandle, uint aVoiceHandle, float aDopplerFactor);
private static extern(C) void Soloud_mix(int* aObjHandle, float[] aBuffer, uint aSamples);
private static extern(C) void Soloud_mixSigned16(int* aObjHandle, short[] aBuffer, uint aSamples);
private static extern(C) int* BassboostFilter_create();
private static extern(C) int* BassboostFilter_destroy(int* aObjHandle);
private static extern(C) int BassboostFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* BassboostFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint BassboostFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float BassboostFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float BassboostFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int BassboostFilter_setParams(int* aObjHandle, float aBoost);
private static extern(C) int* BiquadResonantFilter_create();
private static extern(C) int* BiquadResonantFilter_destroy(int* aObjHandle);
private static extern(C) int BiquadResonantFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* BiquadResonantFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint BiquadResonantFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float BiquadResonantFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float BiquadResonantFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int BiquadResonantFilter_setParams(int* aObjHandle, int aType, float aFrequency, float aResonance);
private static extern(C) int* Bus_create();
private static extern(C) int* Bus_destroy(int* aObjHandle);
private static extern(C) void Bus_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) uint Bus_playEx(int* aObjHandle, int* aSound, float aVolume, float aPan, int aPaused);
private static extern(C) uint Bus_playClockedEx(int* aObjHandle, double aSoundTime, int* aSound, float aVolume, float aPan);
private static extern(C) uint Bus_play3dEx(int* aObjHandle, int* aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume, int aPaused);
private static extern(C) uint Bus_play3dClockedEx(int* aObjHandle, double aSoundTime, int* aSound, float aPosX, float aPosY, float aPosZ, float aVelX, float aVelY, float aVelZ, float aVolume);
private static extern(C) int Bus_setChannels(int* aObjHandle, uint aChannels);
private static extern(C) void Bus_setVisualizationEnable(int* aObjHandle, int aEnable);
private static extern(C) void Bus_annexSound(int* aObjHandle, uint aVoiceHandle);
private static extern(C) float[] Bus_calcFFT(int* aObjHandle);
private static extern(C) float[] Bus_getWave(int* aObjHandle);
private static extern(C) float Bus_getApproximateVolume(int* aObjHandle, uint aChannel);
private static extern(C) uint Bus_getActiveVoiceCount(int* aObjHandle);
private static extern(C) void Bus_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Bus_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Bus_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Bus_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Bus_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Bus_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Bus_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Bus_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Bus_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Bus_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Bus_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Bus_getLoopPoint(int* aObjHandle);
private static extern(C) void Bus_stop(int* aObjHandle);
private static extern(C) int* DCRemovalFilter_create();
private static extern(C) int* DCRemovalFilter_destroy(int* aObjHandle);
private static extern(C) int DCRemovalFilter_setParamsEx(int* aObjHandle, float aLength);
private static extern(C) int DCRemovalFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* DCRemovalFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint DCRemovalFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float DCRemovalFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float DCRemovalFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int* EchoFilter_create();
private static extern(C) int* EchoFilter_destroy(int* aObjHandle);
private static extern(C) int EchoFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* EchoFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint EchoFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float EchoFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float EchoFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int EchoFilter_setParamsEx(int* aObjHandle, float aDelay, float aDecay, float aFilter);
private static extern(C) int* FFTFilter_create();
private static extern(C) int* FFTFilter_destroy(int* aObjHandle);
private static extern(C) int FFTFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* FFTFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint FFTFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float FFTFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float FFTFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int* FlangerFilter_create();
private static extern(C) int* FlangerFilter_destroy(int* aObjHandle);
private static extern(C) int FlangerFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* FlangerFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint FlangerFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float FlangerFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float FlangerFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int FlangerFilter_setParams(int* aObjHandle, float aDelay, float aFreq);
private static extern(C) int* FreeverbFilter_create();
private static extern(C) int* FreeverbFilter_destroy(int* aObjHandle);
private static extern(C) int FreeverbFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* FreeverbFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint FreeverbFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float FreeverbFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float FreeverbFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int FreeverbFilter_setParams(int* aObjHandle, float aMode, float aRoomSize, float aDamp, float aWidth);
private static extern(C) int* LofiFilter_create();
private static extern(C) int* LofiFilter_destroy(int* aObjHandle);
private static extern(C) int LofiFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* LofiFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint LofiFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float LofiFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float LofiFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int LofiFilter_setParams(int* aObjHandle, float aSampleRate, float aBitdepth);
private static extern(C) int* Monotone_create();
private static extern(C) int* Monotone_destroy(int* aObjHandle);
private static extern(C) int Monotone_setParamsEx(int* aObjHandle, int aHardwareChannels, int aWaveform);
private static extern(C) int Monotone_load(int* aObjHandle, const(char)* aFilename);
private static extern(C) int Monotone_loadMemEx(int* aObjHandle, ubyte* aMem, uint aLength, int aCopy, int aTakeOwnership);
private static extern(C) int Monotone_loadFile(int* aObjHandle, int* aFile);
private static extern(C) void Monotone_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Monotone_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Monotone_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Monotone_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Monotone_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Monotone_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Monotone_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Monotone_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Monotone_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Monotone_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Monotone_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Monotone_getLoopPoint(int* aObjHandle);
private static extern(C) void Monotone_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Monotone_stop(int* aObjHandle);
private static extern(C) int* Noise_create();
private static extern(C) int* Noise_destroy(int* aObjHandle);
private static extern(C) void Noise_setOctaveScale(int* aObjHandle, float aOct0, float aOct1, float aOct2, float aOct3, float aOct4, float aOct5, float aOct6, float aOct7, float aOct8, float aOct9);
private static extern(C) void Noise_setType(int* aObjHandle, int aType);
private static extern(C) void Noise_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Noise_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Noise_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Noise_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Noise_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Noise_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Noise_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Noise_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Noise_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Noise_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Noise_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Noise_getLoopPoint(int* aObjHandle);
private static extern(C) void Noise_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Noise_stop(int* aObjHandle);
private static extern(C) int* Openmpt_create();
private static extern(C) int* Openmpt_destroy(int* aObjHandle);
private static extern(C) int Openmpt_load(int* aObjHandle, const(char)* aFilename);
private static extern(C) int Openmpt_loadMemEx(int* aObjHandle, ubyte* aMem, uint aLength, int aCopy, int aTakeOwnership);
private static extern(C) int Openmpt_loadFile(int* aObjHandle, int* aFile);
private static extern(C) void Openmpt_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Openmpt_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Openmpt_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Openmpt_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Openmpt_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Openmpt_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Openmpt_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Openmpt_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Openmpt_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Openmpt_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Openmpt_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Openmpt_getLoopPoint(int* aObjHandle);
private static extern(C) void Openmpt_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Openmpt_stop(int* aObjHandle);
private static extern(C) int* Queue_create();
private static extern(C) int* Queue_destroy(int* aObjHandle);
private static extern(C) int Queue_play(int* aObjHandle, int* aSound);
private static extern(C) uint Queue_getQueueCount(int* aObjHandle);
private static extern(C) int Queue_isCurrentlyPlaying(int* aObjHandle, int* aSound);
private static extern(C) int Queue_setParamsFromAudioSource(int* aObjHandle, int* aSound);
private static extern(C) int Queue_setParamsEx(int* aObjHandle, float aSamplerate, uint aChannels);
private static extern(C) void Queue_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Queue_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Queue_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Queue_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Queue_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Queue_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Queue_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Queue_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Queue_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Queue_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Queue_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Queue_getLoopPoint(int* aObjHandle);
private static extern(C) void Queue_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Queue_stop(int* aObjHandle);
private static extern(C) int* RobotizeFilter_create();
private static extern(C) int* RobotizeFilter_destroy(int* aObjHandle);
private static extern(C) int RobotizeFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* RobotizeFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint RobotizeFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float RobotizeFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float RobotizeFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) void RobotizeFilter_setParams(int* aObjHandle, float aFreq, int aWaveform);
private static extern(C) int* Sfxr_create();
private static extern(C) int* Sfxr_destroy(int* aObjHandle);
private static extern(C) void Sfxr_resetParams(int* aObjHandle);
private static extern(C) int Sfxr_loadParams(int* aObjHandle, const(char)* aFilename);
private static extern(C) int Sfxr_loadParamsMemEx(int* aObjHandle, ubyte* aMem, uint aLength, int aCopy, int aTakeOwnership);
private static extern(C) int Sfxr_loadParamsFile(int* aObjHandle, int* aFile);
private static extern(C) int Sfxr_loadPreset(int* aObjHandle, int aPresetNo, int aRandSeed);
private static extern(C) void Sfxr_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Sfxr_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Sfxr_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Sfxr_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Sfxr_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Sfxr_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Sfxr_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Sfxr_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Sfxr_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Sfxr_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Sfxr_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Sfxr_getLoopPoint(int* aObjHandle);
private static extern(C) void Sfxr_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Sfxr_stop(int* aObjHandle);
private static extern(C) int* Speech_create();
private static extern(C) int* Speech_destroy(int* aObjHandle);
private static extern(C) int Speech_setText(int* aObjHandle, const(char)* aText);
private static extern(C) int Speech_setParamsEx(int* aObjHandle, uint aBaseFrequency, float aBaseSpeed, float aBaseDeclination, int aBaseWaveform);
private static extern(C) void Speech_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Speech_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Speech_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Speech_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Speech_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Speech_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Speech_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Speech_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Speech_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Speech_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Speech_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Speech_getLoopPoint(int* aObjHandle);
private static extern(C) void Speech_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Speech_stop(int* aObjHandle);
private static extern(C) int* TedSid_create();
private static extern(C) int* TedSid_destroy(int* aObjHandle);
private static extern(C) int TedSid_load(int* aObjHandle, const(char)* aFilename);
private static extern(C) int TedSid_loadToMem(int* aObjHandle, const(char)* aFilename);
private static extern(C) int TedSid_loadMemEx(int* aObjHandle, ubyte* aMem, uint aLength, int aCopy, int aTakeOwnership);
private static extern(C) int TedSid_loadFileToMem(int* aObjHandle, int* aFile);
private static extern(C) int TedSid_loadFile(int* aObjHandle, int* aFile);
private static extern(C) void TedSid_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void TedSid_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void TedSid_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void TedSid_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void TedSid_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void TedSid_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void TedSid_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void TedSid_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void TedSid_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void TedSid_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void TedSid_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double TedSid_getLoopPoint(int* aObjHandle);
private static extern(C) void TedSid_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void TedSid_stop(int* aObjHandle);
private static extern(C) int* Vic_create();
private static extern(C) int* Vic_destroy(int* aObjHandle);
private static extern(C) void Vic_setModel(int* aObjHandle, int model);
private static extern(C) int Vic_getModel(int* aObjHandle);
private static extern(C) void Vic_setRegister(int* aObjHandle, int reg, ubyte value);
private static extern(C) ubyte Vic_getRegister(int* aObjHandle, int reg);
private static extern(C) void Vic_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Vic_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Vic_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Vic_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Vic_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Vic_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Vic_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Vic_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Vic_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Vic_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Vic_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Vic_getLoopPoint(int* aObjHandle);
private static extern(C) void Vic_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Vic_stop(int* aObjHandle);
private static extern(C) int* Vizsn_create();
private static extern(C) int* Vizsn_destroy(int* aObjHandle);
private static extern(C) void Vizsn_setText(int* aObjHandle, char* aText);
private static extern(C) void Vizsn_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Vizsn_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Vizsn_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Vizsn_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Vizsn_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Vizsn_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Vizsn_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Vizsn_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Vizsn_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Vizsn_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Vizsn_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Vizsn_getLoopPoint(int* aObjHandle);
private static extern(C) void Vizsn_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Vizsn_stop(int* aObjHandle);
private static extern(C) int* Wav_create();
private static extern(C) int* Wav_destroy(int* aObjHandle);
private static extern(C) int Wav_load(int* aObjHandle, const(char)* aFilename);
private static extern(C) int Wav_loadMemEx(int* aObjHandle, ubyte* aMem, uint aLength, int aCopy, int aTakeOwnership);
private static extern(C) int Wav_loadFile(int* aObjHandle, int* aFile);
private static extern(C) int Wav_loadRawWave8Ex(int* aObjHandle, ubyte* aMem, uint aLength, float aSamplerate, uint aChannels);
private static extern(C) int Wav_loadRawWave16Ex(int* aObjHandle, short[] aMem, uint aLength, float aSamplerate, uint aChannels);
private static extern(C) int Wav_loadRawWaveEx(int* aObjHandle, float[] aMem, uint aLength, float aSamplerate, uint aChannels, int aCopy, int aTakeOwnership);
private static extern(C) double Wav_getLength(int* aObjHandle);
private static extern(C) void Wav_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void Wav_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void Wav_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void Wav_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void Wav_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void Wav_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void Wav_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void Wav_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void Wav_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void Wav_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void Wav_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double Wav_getLoopPoint(int* aObjHandle);
private static extern(C) void Wav_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void Wav_stop(int* aObjHandle);
private static extern(C) int* WaveShaperFilter_create();
private static extern(C) int* WaveShaperFilter_destroy(int* aObjHandle);
private static extern(C) int WaveShaperFilter_setParams(int* aObjHandle, float aAmount);
private static extern(C) int WaveShaperFilter_getParamCount(int* aObjHandle);
private static extern(C) const(char)* WaveShaperFilter_getParamName(int* aObjHandle, uint aParamIndex);
private static extern(C) uint WaveShaperFilter_getParamType(int* aObjHandle, uint aParamIndex);
private static extern(C) float WaveShaperFilter_getParamMax(int* aObjHandle, uint aParamIndex);
private static extern(C) float WaveShaperFilter_getParamMin(int* aObjHandle, uint aParamIndex);
private static extern(C) int* WavStream_create();
private static extern(C) int* WavStream_destroy(int* aObjHandle);
private static extern(C) int WavStream_load(int* aObjHandle, const(char)* aFilename);
private static extern(C) int WavStream_loadMemEx(int* aObjHandle, ubyte* aData, uint aDataLen, int aCopy, int aTakeOwnership);
private static extern(C) int WavStream_loadToMem(int* aObjHandle, const(char)* aFilename);
private static extern(C) int WavStream_loadFile(int* aObjHandle, int* aFile);
private static extern(C) int WavStream_loadFileToMem(int* aObjHandle, int* aFile);
private static extern(C) double WavStream_getLength(int* aObjHandle);
private static extern(C) void WavStream_setVolume(int* aObjHandle, float aVolume);
private static extern(C) void WavStream_setLooping(int* aObjHandle, int aLoop);
private static extern(C) void WavStream_set3dMinMaxDistance(int* aObjHandle, float aMinDistance, float aMaxDistance);
private static extern(C) void WavStream_set3dAttenuation(int* aObjHandle, uint aAttenuationModel, float aAttenuationRolloffFactor);
private static extern(C) void WavStream_set3dDopplerFactor(int* aObjHandle, float aDopplerFactor);
private static extern(C) void WavStream_set3dListenerRelative(int* aObjHandle, int aListenerRelative);
private static extern(C) void WavStream_set3dDistanceDelay(int* aObjHandle, int aDistanceDelay);
private static extern(C) void WavStream_set3dColliderEx(int* aObjHandle, int* aCollider, int aUserData);
private static extern(C) void WavStream_set3dAttenuator(int* aObjHandle, int* aAttenuator);
private static extern(C) void WavStream_setInaudibleBehavior(int* aObjHandle, int aMustTick, int aKill);
private static extern(C) void WavStream_setLoopPoint(int* aObjHandle, double aLoopPoint);
private static extern(C) double WavStream_getLoopPoint(int* aObjHandle);
private static extern(C) void WavStream_setFilter(int* aObjHandle, uint aFilterId, int* aFilter);
private static extern(C) void WavStream_stop(int* aObjHandle);
