name: CI_Linux

on:
  # pull_request:
  #   branches:
  #   - master
  schedule:               # Schedule 3.x nightly build! (not master MU3)  
    - cron: '0 4 */1 * *' # At 04:00 on every day-of-month
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, nightly_build, testing_build, stable_build'
        required: true
        default: 'devel_build'
      publish:
        description: 'Publish to FTP: on - publish'
        required: false
        default: 'off'

jobs:
  build_mu3:
    runs-on: ubuntu-16.04
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.5.0
      with:
        access_token: ${{ github.token }}
    - name: Clone repository (default)
      if: ${{ github.event_name != 'schedule' }}
      uses: actions/checkout@v2
    - name: Clone repository (3.x for build nightly )
      if: ${{ github.event_name == 'schedule' }}
      uses: actions/checkout@v2
      with:
        ref: 3.x
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        NOW=$(date -u +"%F-%T")
        echo "::set-output name=timestamp::${NOW}"
    - name: Ð¡cache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{github.workflow}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: ${{github.workflow}}-ccache-  # restore ccache from either previous build on this branch or on master  
    - name: Setup ccache
      run: |
        sudo apt install ccache
        mkdir -p ~/.ccache
        echo "base_dir = ${GITHUB_WORKSPACE}" > ~/.ccache/ccache.conf
        echo "compression = true" >> ~/.ccache/ccache.conf
        echo "compression_level = 6" >> ~/.ccache/ccache.conf
        echo "max_size = 2G" >> ~/.ccache/ccache.conf
        cat ~/.ccache/ccache.conf
        ccache -s
        ccache -z     
    - name: "Configure workflow"
      run: |
        sudo bash ./build/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ github.event.inputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)

        DO_PUBLISH='false'
        if [[ "${{ github.event.inputs.publish }}" == "on" || "$BUILD_MODE" == "nightly_build" ]]; then 
          DO_PUBLISH='true'
          if [ -z "${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }}" ]; then 
            echo "warning: not set OSUOSL_SSH_ENCRYPT_SECRET, publish disabled" 
            DO_PUBLISH='false'
          fi  
        fi

        DO_BUILD='true'
        if [ "$BUILD_MODE" == "nightly_build" ]; then 
          if [ "${{ github.repository }}" != "musescore/MuseScore" ]; then 
            DO_BUILD='false'
            DO_PUBLISH='false'
          fi
        fi
        
        echo "github.repository: ${{ github.repository }}"
        echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_ENV
        echo "BUILD_MODE: $BUILD_MODE"
        echo "DO_BUILD=$DO_BUILD" >> $GITHUB_ENV
        echo "DO_BUILD: $DO_BUILD"
        echo "DO_PUBLISH=$DO_PUBLISH" >> $GITHUB_ENV
        echo "DO_PUBLISH: $DO_PUBLISH"

    - name: Setup environment
      if: env.DO_BUILD == 'true'
      run: |
        sudo bash ./build/ci/linux/setup.sh
    - name: Build
      if: env.DO_BUILD == 'true'
      run: |
        T_ID=${{ secrets.TELEMETRY_TRACK_ID }}; if [ -z "$T_ID" ]; then T_ID="''"; fi
        YT_API_KEY=${{ secrets.YOUTUBE_API_KEY }}; if [ -z "$YT_API_KEY" ]; then YT_API_KEY="''"; fi
        sudo bash ./build/ci/linux/build.sh -n ${{ github.run_id }} --telemetry $T_ID --youtube_api_key $YT_API_KEY
      name: Package
      if: env.DO_BUILD == 'true'
      run: |
        sudo bash ./build/ci/linux/package.sh
    - name: Checksum 
      if: env.DO_BUILD == 'true'
      run: |
        sudo bash ./build/ci/tools/checksum.sh
    - name: Publish package
      if: env.DO_PUBLISH == 'true'
      run: |
        if [ "$BUILD_MODE" == "nightly_build" ]; then VER=3; else VER=4; fi
        sudo bash ./build/ci/tools/osuosl/publish.sh -s ${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }} --os linux -v $VER
    - name: Upload artifacts on GitHub
      if: env.DO_BUILD == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: MuseScore_${{ github.run_id }}
        path: ./build.artifacts/

  run_mtests:
    runs-on: ubuntu-16.04
    env:
        # Enable AddressSanitizer in the mtest build
        CFLAGS: "-fsanitize=address -fno-omit-frame-pointer"
        CXXFLAGS: "-fsanitize=address -fno-omit-frame-pointer"
    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Setup environment
      run: |
        sudo bash ./build/ci/linux/setup.sh
    - name: Build
      run: |
        mkdir -p build.artifacts/env
        sudo bash ./build/ci/linux/build.sh -n ${{ github.run_id }} --build_mode mtests
    - name: Run mtests 
      run: |
        # At moment build and run mtests consume 13.4 Gb of the disk.
        # After left too little free space.
        # So, we remove unnecessary tools, for more free space
        sudo docker system prune -a -f
        sudo rm -rf /usr/local/lib/android
        sudo bash ./build/ci/linux/runmtests.sh
