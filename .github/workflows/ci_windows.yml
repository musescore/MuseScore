name: CI_Windows

on:
  # At the moment, the mu3 is not automatically building, but you can build it manually
  # pull_request:
  #   branches:
  #   - master
  schedule:                 # Schedule 3.x nightly build! (not master MU3)  
    - cron: '0 4 */1 * *' # At 04:00 on every day-of-month
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, nightly_build, testing_build, stable_build'
        required: true
        default: 'devel_build'
      publish:
        description: 'Publish to FTP: on - publish'
        required: false
        default: 'off'   

jobs:
  build_mu3_x64:
    runs-on: windows-2019
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.5.0
      with:
        access_token: ${{ github.token }}
    - name: Clone repository (default)
      if: ${{ github.event_name != 'schedule' }}
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Clone repository (3.x for build nightly )
      if: ${{ github.event_name == 'schedule' }}
      uses: actions/checkout@v2
      with:
        submodules: 'true'
        ref: 3.x
    - name: "Configure workflow"
      shell: bash
      run: |
        bash ./build/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ github.event.inputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)
        echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_ENV

        DO_PUBLISH='false'
        if [[ "${{ github.event.inputs.publish }}" == "on" || "$BUILD_MODE" == "nightly_build" ]]; then 
          DO_PUBLISH='true'
          if [ -z "${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }}" ]; then 
            echo "warning: not set OSUOSL_SSH_ENCRYPT_SECRET, publish disabled" 
            DO_PUBLISH='false'
          fi  
        fi
        echo "DO_PUBLISH=$DO_PUBLISH" >> $GITHUB_ENV
        echo "DO_PUBLISH: $DO_PUBLISH"

        DO_CHECKSUM='true'
        if [ "$BUILD_MODE" == "devel_build" ]; then DO_CHECKSUM='false'; fi
        echo "DO_CHECKSUM=$DO_CHECKSUM" >> $GITHUB_ENV
        echo "DO_CHECKSUM: $DO_CHECKSUM"

        DO_APPCAST='true'
        if [ "$BUILD_MODE" == "devel_build" ]; then DO_APPCAST='false'; fi
        echo "DO_APPCAST=$DO_APPCAST" >> $GITHUB_ENV
        echo "DO_APPCAST: $DO_APPCAST"

    - name: Setup environment
      run: |
        build\ci\windows\setup.bat
    - name: Build
      shell: cmd
      run: |
        IF ${{ secrets.TELEMETRY_TRACK_ID != 0 }} == true ( SET T_ID=${{ secrets.TELEMETRY_TRACK_ID }} ) ELSE ( SET T_ID="''" )
        IF ${{ secrets.CRASH_LOG_SERVER_URL != 0 }} == true ( SET C_URL=${{ secrets.CRASH_LOG_SERVER_URL }} ) ELSE ( SET C_URL="''" )
        build\ci\windows\build.bat -n ${{ github.run_id }} --telemetry %T_ID% --crashurl %C_URL% --build_mu4 OFF
    - name: Package 
      shell: cmd
      run: |
        IF ${{ secrets.WIN_SIGN_CERTIFICATE_ENCRYPT_SECRET != 0 }} == true ( SET S_S=${{ secrets.WIN_SIGN_CERTIFICATE_ENCRYPT_SECRET }} ) ELSE ( SET S_S="''" )
        IF ${{ secrets.WIN_SIGN_CERTIFICATE_PASSWORD != 0 }} == true ( SET S_P=${{ secrets.WIN_SIGN_CERTIFICATE_PASSWORD }} ) ELSE ( SET S_P="''" )
        IF ${{ env.BUILD_MODE }} == stable_build ( SET GUID=${{ secrets.WIN_MSI_STABLE_GUID }} ) ELSE ( SET GUID=${{ secrets.WIN_MSI_TESTING_GUID }} )
        build\ci\windows\package.bat --signsecret %S_S% --signpass %S_P% --guid %GUID%
    - name: Checksum
      if: env.DO_CHECKSUM == 'true' 
      run: |
        bash ./build/ci/tools/checksum.sh     
    - name: Publish package
      if: env.DO_PUBLISH == 'true'
      shell: bash
      run: |
        if [ "$BUILD_MODE" == "nightly_build" ]; then VER=3; else VER=4; fi
        bash ./build/ci/tools/osuosl/publish.sh -s ${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }} --os windows -v $VER
    - name: AppCast
      if: env.DO_APPCAST == 'true'   
      shell: bash
      run: |
        bash ./build/ci/tools/sparkle_appcast_gen.sh -p windows
    - name: Upload artifacts on GitHub
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: MuseScore_x64_${{ github.run_id }}
        path: build.artifacts\ 
