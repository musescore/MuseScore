name: CI_MacOS MU4

on:
  pull_request:
    branches:
    - master
  schedule: 
    - cron: '0 4 */1 */1 *' # At 04:00 on every day-of-month  
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, nightly_build, testing_build, stable_build'
        required: true
        default: 'devel_build'
      publish:
        description: 'Publish to FTP: on - publish'
        required: false
        default: 'off' 
      sentry_project:
        description: 'Upload symbols and dumps to Sentry (choose a project): editor, sandbox'
        required: false
        default: ''    

env:
    DEVELOPER_DIR: /Applications/Xcode_12.3.app/Contents/Developer

jobs:
  build_mu4:    
    runs-on: macos-10.15
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.5.0
      with:
        access_token: ${{ github.token }}
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Ð¡cache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{github.workflow}}-ccache-$(date -u +"%F-%T")
        restore-keys: ${{github.workflow}}-ccache-  # restore ccache from either previous build on this branch or on master    
    - name: Setup ccache
      run: |
        bash ./build/ci/tools/setup_ccache.sh          
    - name: "Configure workflow"
      run: |
        bash ./build/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ github.event.inputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)

        DO_PUBLISH='false'
        if [[ "${{ github.event.inputs.publish }}" == "on" || "$BUILD_MODE" == "nightly_build" ]]; then 
          DO_PUBLISH='true'
          if [ -z "${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }}" ]; then 
            echo "warning: not set OSUOSL_SSH_ENCRYPT_SECRET, publish disabled" 
            DO_PUBLISH='false'
          fi  
        fi

        DO_NOTARIZE='false'
        if [ "$BUILD_MODE" != "devel_build" ]; then 
          DO_NOTARIZE='true'
          if [ -z "${{ secrets.APPLE_USERNAME }}" ]; then 
            echo "warning: not set APPLE_USERNAME, notarize disabled" 
            DO_NOTARIZE='false'
          fi
          if [ -z "${{ secrets.APPLE_PASSWORD }}" ]; then 
            echo "warning: not set APPLE_PASSWORD, notarize disabled" 
            DO_NOTARIZE='false'
          fi 
        fi

        DO_BUILD='true'
        if [ "$BUILD_MODE" == "nightly_build" ]; then 
          if [ "${{ github.repository }}" != "musescore/MuseScore" ]; then 
            DO_BUILD='false'
          fi
        fi

        DO_UPLOAD_SYMBOLS='false'
        SENTRY_PROJECT=${{ github.event.inputs.sentry_project }}
        SENTRY_URL=""
        if [ "$SENTRY_PROJECT" == "editor" ] && [ ${{ secrets.SENTRY_SERVER_MU3_KEY }} != 0 ]; then 
          DO_UPLOAD_SYMBOLS='true'
          SENTRY_URL=https://sentry.musescore.org/api/2/minidump/?sentry_key=${{ secrets.SENTRY_SERVER_MU3_KEY }}
        fi

        if [ "$SENTRY_PROJECT" == "sandbox" ] && [ ${{ secrets.SENTRY_SERVER_SANDBOX_KEY }} != 0 ]; then 
          DO_UPLOAD_SYMBOLS='true'
          SENTRY_URL=https://sentry.musescore.org/api/3/minidump/?sentry_key=${{ secrets.SENTRY_SERVER_SANDBOX_KEY }}
        fi

        if [ $DO_BUILD == 'false' ]; then
          DO_NOTARIZE='false'
          DO_UPLOAD_SYMBOLS='false'
          DO_PUBLISH='false'
        fi
        
        echo "github.repository: ${{ github.repository }}"
        echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_ENV
        echo "BUILD_MODE: $BUILD_MODE"
        echo "DO_BUILD=$DO_BUILD" >> $GITHUB_ENV
        echo "DO_BUILD: $DO_BUILD"
        echo "DO_NOTARIZE=$DO_NOTARIZE" >> $GITHUB_ENV
        echo "DO_NOTARIZE: $DO_NOTARIZE"
        echo "DO_PUBLISH=$DO_PUBLISH" >> $GITHUB_ENV
        echo "DO_PUBLISH: $DO_PUBLISH"
        echo "DO_UPLOAD_SYMBOLS=$DO_UPLOAD_SYMBOLS" >> $GITHUB_ENV
        echo "DO_UPLOAD_SYMBOLS: $DO_UPLOAD_SYMBOLS"
        echo "SENTRY_PROJECT=$SENTRY_PROJECT" >> $GITHUB_ENV
        echo "SENTRY_PROJECT: $SENTRY_PROJECT"
        echo "SENTRY_URL=$SENTRY_URL" >> $GITHUB_ENV
        echo "SENTRY_URL: $SENTRY_URL"

    - name: Setup environment
      if: env.DO_BUILD == 'true'
      run: |
        bash ./build/ci/macos/setup.sh  
    - name: Build
      if: env.DO_BUILD == 'true'    
      run: |
        T_ID=${{ secrets.TELEMETRY_TRACK_ID }}; if [ -z "$T_ID" ]; then T_ID="''"; fi
        YT_API_KEY=${{ secrets.YOUTUBE_API_KEY }}; if [ -z "$YT_API_KEY" ]; then YT_API_KEY="''"; fi
        C_URL=${SENTRY_URL}; if [ -z "$C_URL" ]; then C_URL="''"; fi
        bash ./build/ci/macos/build.sh -n ${{ github.run_id }} --telemetry $T_ID --youtube_api_key $YT_API_KEY --crash_log_url $C_URL
        echo "============== ccache ==============="
        ccache -s
    - name: Generate dump symbols
      if: env.DO_BUILD == 'true'
      run: |
        bash ./build/ci/macos/dumpsyms.sh  
    - name: Package 
      if: env.DO_BUILD == 'true'
      run: |
        S_S="${{ secrets.MAC_SIGN_CERTIFICATE_ENCRYPT_SECRET }}"; if [ -z "$S_S" ]; then S_S="''"; fi
        S_P="${{ secrets.MAC_SIGN_CERTIFICATE_PASSWORD }}"; if [ -z "$S_P" ]; then S_P="''"; fi
        bash ./build/ci/macos/package.sh --signpass "$S_P" --signsecret "$S_S" 
    - name: Notarize
      if: env.DO_NOTARIZE == 'true'
      run: |
        USER=${{ secrets.APPLE_USERNAME }}; if [ -z "$USER" ]; then USER=""; fi
        PW=${{ secrets.APPLE_PASSWORD }}; if [ -z "$PW" ]; then PW=""; fi
        bash ./build/ci/macos/notarize.sh -u $USER -p $PW
    - name: Checksum 
      if: env.DO_BUILD == 'true'
      run: |
        bash ./build/ci/tools/checksum.sh
    - name: Upload dump symbols
      if: env.DO_UPLOAD_SYMBOLS == 'true'
      run: |
        bash ./build/ci/tools/sentry_syms_upload.sh -t ${{ secrets.SENTRY_AUTH_TOKEN }} -p ${SENTRY_PROJECT}    
    - name: Publish package 
      if: env.DO_PUBLISH == 'true'
      run: |
        bash ./build/ci/tools/osuosl/publish.sh -s ${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }} --os macos -v 4
    - name: AppCast
      if: env.DO_BUILD == 'true'
      run: |
        bash ./build/ci/tools/sparkle_appcast_gen.sh -p macos   
    - name: Upload artifacts on GitHub
      if: env.DO_BUILD == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: MuseScore_MU4_${{ github.run_id }}
        path: ./build.artifacts/