#!/usr/bin/env bash

# APPDIR and APPIMAGE are environment variables which are set when the user
# runs the AppImage. They won't be set if you try to run this outside of an
# AppImage, so here we set them to something sensible instead for testing.
[[  "${APPDIR}"  ]] || export APPDIR="$(dirname "$(readlink -f "${0}")")"
[[ "${APPIMAGE}" ]] || export APPIMAGE="${APPDIR}/AppRun"

function find_library()
{
  # Print full path to a library or return exit status 1 if not found
  local library="$1" # take library name as input (e.g. "libfoo.so")
  # Look for the library in $LD_LIBRARY_PATH
  local dir IFS=':' # split path into array on this separator
  for dir in "${LD_LIBRARY_PATH[@]}"; do
    if [[ -e "${dir}/${library}" ]]; then
      echo "${dir}/${library}"
      return # Library found
    fi
  done
  # Not found yet so check system cache
  ldconfig -p | awk -v lib="${library}" -v arch="${HOSTTYPE}" \
'
BEGIN {status=1}
($1 == lib && index($0, arch)) {print $NF; status=0; exit}
END {exit status}
'
}

# Check system libraries and load a fallback if necessary
fallback_libs="" # start empty
for fb_dir in "${APPDIR}/fallback"/*; do
  if [[ -d "${fb_dir}" ]]; then
    library="${fb_dir##*/}" # library named like directory
    if ! find_library "${library}"; then
      echo "${APPIMAGE}: Using fallback for library '${library}'" >&2
      fallback_libs="${fallback_libs}:${fb_dir}" # append path
    fi
  fi
done

# Setting LD_LIBRARY_PATH won't override AppImage libraries, but advanced users
# can do that with APPIMAGE_LIBRARY_PATH if they really want to.
libs="${APPDIR}/lib"
export LD_LIBRARY_PATH="${APPIMAGE_LIBRARY_PATH}:${libs}:${libs}/qt5/lib:${LD_LIBRARY_PATH}${fallback_libs}"

# Launch MuseScore or an accompanying script
case "$1" in
  -h|--help|install|uninstall|remove|man|manual|manpage|check-depends|check-dependencies )
    "${APPDIR}/bin/portable-utils" "$@"
    ;;
  * )
    "${APPDIR}/bin/mscore@MSCORE_INSTALL_SUFFIX@" "$@"
    ;;
esac
